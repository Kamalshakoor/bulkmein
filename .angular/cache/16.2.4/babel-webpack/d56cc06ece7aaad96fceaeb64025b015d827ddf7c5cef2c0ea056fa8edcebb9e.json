{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let CartQtyUpdateService = /*#__PURE__*/(() => {\n  class CartQtyUpdateService {\n    constructor() {\n      this.cart_qty = 0;\n      this.cartItemsSubject = new BehaviorSubject([]);\n      this.cartItems$ = this.cartItemsSubject.asObservable();\n    }\n    updateCartItems(items) {\n      this.cartItemsSubject.next(items);\n    }\n    updateQty(spanElement, typeofupdate, interval, minimumQuantity, maxQuantity) {\n      this.cart_qty = parseInt(spanElement.textContent ?? '0', 10);\n      if (typeofupdate == \"inc\") {\n        if (isNaN(this.cart_qty)) {\n          this.cart_qty = minimumQuantity;\n        } else {\n          if (this.cart_qty >= maxQuantity) {\n            this.cart_qty = maxQuantity;\n          } else {\n            this.cart_qty += interval;\n          }\n        }\n      } else if (typeofupdate = \"dec\") {\n        if (isNaN(this.cart_qty)) {\n          this.cart_qty = minimumQuantity;\n        } else if (this.cart_qty > 1) {\n          let min_check = this.cart_qty - interval;\n          if (min_check > minimumQuantity) {\n            this.cart_qty -= interval;\n          } else {\n            this.cart_qty = minimumQuantity;\n          }\n        }\n      }\n      return this.cart_qty;\n    }\n    static #_ = this.ɵfac = function CartQtyUpdateService_Factory(t) {\n      return new (t || CartQtyUpdateService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CartQtyUpdateService,\n      factory: CartQtyUpdateService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return CartQtyUpdateService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}