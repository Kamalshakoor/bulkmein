{"ast":null,"code":"import _asyncToGenerator from \"/home/muqadam/Downloads/ng/ng/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { environment } from './../../../environment';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../notification/notification.service\";\nimport * as i2 from \"@angular/router\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(notify, router) {\n      this.notify = notify;\n      this.router = router;\n      this.user_signed_in = false;\n      this.apiUrl = environment.apiUrl;\n    }\n    preparePostRequestData(userData, request_method) {\n      return {\n        method: request_method,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      };\n    }\n    prepareGetRequestData(accessToken) {\n      return {\n        method: \"GET\",\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json'\n        }\n      };\n    }\n    prepareGetPostPutWithBodyAndToken(accessToken, requestMethod, requestBody) {\n      return {\n        method: requestMethod,\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      };\n    }\n    userSignedIn() {\n      return this.user_signed_in;\n    }\n    isUserLoggedIn(accessToken) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        let headers = _this.prepareGetRequestData(accessToken);\n        try {\n          const response = yield fetch(`${_this.apiUrl}/user/isUserLoggedIn`, headers);\n          if (response.status == 200) {\n            _this.user_signed_in = true;\n          }\n          return yield response.json();\n        } catch (error) {\n          _this.notify.someThingWentWrong();\n          console.error('An error occurred:', error);\n          throw error;\n        }\n      })();\n    }\n    getProductListForSearch() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const response = yield fetch(`${_this2.apiUrl}/product/getProductListForSearch`);\n          if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n          }\n          return yield response.json();\n        } catch (error) {\n          console.error('An error occurred:', error);\n          throw error;\n        }\n      })();\n    }\n    login(userData) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        const requestOptions = _this3.preparePostRequestData(userData, \"POST\");\n        try {\n          const response = yield fetch(`${_this3.apiUrl}/user/login`, requestOptions);\n          if (!response.ok) {\n            let err = yield response.json();\n            _this3.notify.processNotSuccessfull(err.message);\n          }\n          return yield response.json();\n        } catch (error) {\n          // console.error('An error occurred:', error);\n          // throw error;\n        }\n      })();\n    }\n    signup(userData) {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        const requestOptions = _this4.preparePostRequestData(userData, \"POST\");\n        try {\n          const response = yield fetch(`${_this4.apiUrl}/user/registerNewUser`, requestOptions);\n          if (!response.ok) {\n            if (response.status == 403) {\n              let r = yield response.json();\n              _this4.notify.processNotSuccessfull(r.message);\n            } else {\n              _this4.notify.someThingWentWrong();\n            }\n          }\n          return yield response.json();\n        } catch (error) {\n          console.error('An error occurred:', error);\n          throw error;\n        }\n      })();\n    }\n    VerifyOtpForNonAuthenticatedUser(otp, token) {\n      var _this5 = this;\n      return _asyncToGenerator(function* () {\n        let endpoint = `${environment.apiUrl}/user/verifyOtp?token=${token}&otp=${otp}`;\n        try {\n          const response = yield fetch(endpoint);\n          if (response.status == 403) {\n            _this5.notify.processNotSuccessfull(\"Invalid OTP\");\n          }\n          return yield response.json();\n        } catch (error) {\n          console.error('An error occurred:', error);\n          throw error;\n        }\n      })();\n    }\n    VerifyOTPForNonAuthenticatedForgetPassword(otp, token) {\n      var _this6 = this;\n      return _asyncToGenerator(function* () {\n        let endpoint = `${environment.apiUrl}/user/verifyOtp?token=${token}&otp=${otp}`;\n        try {\n          const response = yield fetch(endpoint);\n          if (!response.ok) {\n            let r = yield response.json();\n            let error = \"\";\n            if (r.message != null || r.message != undefined) {\n              error = r.message;\n            } else {\n              error = r.error;\n            }\n            _this6.notify.processNotSuccessfull(error);\n          }\n          return yield response.json();\n        } catch (error) {\n          console.error('An error occurred:', error);\n          throw error;\n        }\n      })();\n    }\n    createAccount(formData) {\n      var _this7 = this;\n      return _asyncToGenerator(function* () {\n        console.log(\"formDataformDataformData\", formData);\n        const requestOptions = {\n          method: 'POST',\n          body: formData\n        };\n        try {\n          const response = yield fetch(`${_this7.apiUrl}/signup/registerUser`, requestOptions);\n          if (!response.ok) {\n            _this7.notify.someThingWentWrong();\n          }\n          return yield response.json();\n        } catch (error) {\n          console.error('An error occurred:', error);\n          throw error;\n        }\n      })();\n    }\n    forgetPasswordForNonAuthenticatedUser(userName) {\n      var _this8 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const response = yield fetch(`${_this8.apiUrl}/user/forgetPassword?userName=${userName}`);\n          if (!response.ok) {\n            let r = yield response.json();\n            _this8.notify.processNotSuccessfull(r.message);\n          }\n          return yield response.json();\n        } catch (error) {\n          console.error('An error occurred:', error);\n          throw error;\n        }\n      })();\n    }\n    resendOtp(token, isUserAuthenticated) {\n      var _this9 = this;\n      return _asyncToGenerator(function* () {\n        let headers = null;\n        let response = null;\n        if (isUserAuthenticated) {\n          let accessToken = sessionStorage.getItem(\"accessToken\");\n          headers = _this9.prepareGetRequestData(accessToken);\n          response = yield fetch(`${_this9.apiUrl}/user/resendOtpForLoggedInUser?token=${token}`, headers);\n        } else {\n          response = yield fetch(`${_this9.apiUrl}/user/resendOtp?token=${token}`);\n        }\n        if (response.ok) {\n          _this9.notify.proccessSuccessfull(\"OTP Sent Successfully\");\n        } else {\n          _this9.notify.someThingWentWrong();\n        }\n        console.log(response);\n      })();\n    }\n    sendOTPForAuthenticatedUser() {\n      var _this10 = this;\n      return _asyncToGenerator(function* () {\n        let accessToken = sessionStorage.getItem(\"accessToken\");\n        let headers = _this10.prepareGetRequestData(accessToken);\n        try {\n          const response = yield fetch(`${_this10.apiUrl}/user/generateOtpForLoggedUser`, headers);\n          if (!response.ok) {\n            let r = yield response.json();\n            _this10.notify.processNotSuccessfull(r.message);\n          }\n          return yield response.json();\n        } catch (error) {\n          console.error('An error occurred:', error);\n          throw error;\n        }\n      })();\n    }\n    resetPasswordForAuthenticatedUser(userData) {\n      var _this11 = this;\n      return _asyncToGenerator(function* () {\n        let accessToken = sessionStorage.getItem(\"accessToken\");\n        let headers = _this11.prepareGetPostPutWithBodyAndToken(accessToken, \"PUT\", userData);\n        try {\n          const response = yield fetch(`${_this11.apiUrl}/user/resetPasswordForLoggedInCustomer`, headers);\n          if (!response.ok) {\n            let r = yield response.json();\n            Swal.fire({\n              icon: 'error',\n              title: 'Error',\n              text: r.message\n            });\n          } else if (response.ok) {\n            Swal.fire('Success!', 'Password Updated Successfully.', 'success').then(swal_response => {\n              location.reload();\n            });\n          }\n          return yield response.json();\n        } catch (error) {\n          throw error;\n        }\n      })();\n    }\n    resetPasswordForNonAuthenticatedUser(userData) {\n      var _this12 = this;\n      return _asyncToGenerator(function* () {\n        let headers = _this12.preparePostRequestData(userData, \"PUT\");\n        try {\n          const response = yield fetch(`${_this12.apiUrl}/user/resetPassword`, headers);\n          if (!response.ok) {\n            let r = yield response.json();\n            Swal.fire({\n              icon: 'error',\n              title: 'Error',\n              text: r.message\n            }).then(result => {\n              _this12.router.navigate([\"/\"]);\n            });\n          } else if (response.ok) {\n            Swal.fire('Success!', 'Password Updated Successfully.', 'success').then(result => {\n              _this12.router.navigate([\"/\"]);\n            });\n          }\n          return yield response.json();\n        } catch (error) {\n          throw error;\n        }\n      })();\n    }\n    getProductsPageData() {\n      var _this13 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const response = yield fetch(`${_this13.apiUrl}/homepage/getHomePageDetails`);\n          if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n          }\n          return yield response.json();\n        } catch (error) {\n          _this13.notify.someThingWentWrong();\n          console.error('An error occurred:', error);\n          throw error;\n        }\n      })();\n    }\n    getProductSubCatWise(subCatID) {\n      var _this14 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          let accessToken = sessionStorage.getItem(\"accessToken\");\n          let response = null;\n          if (accessToken != null || accessToken != undefined) {\n            const headers = _this14.prepareGetRequestData(accessToken);\n            response = yield fetch(`${_this14.apiUrl}/product/getProductSubCatWise?subCategoryId=${subCatID}`, headers);\n          } else {\n            response = yield fetch(`${_this14.apiUrl}/product/getProductSubCatWise?subCategoryId=${subCatID}`);\n          }\n          if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n          }\n          return yield response.json();\n        } catch (error) {\n          _this14.notify.someThingWentWrong();\n          console.error('An error occurred:', error);\n          throw error;\n        }\n      })();\n    }\n    getProductById(ProductID, token) {\n      var _this15 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          let response = null;\n          if (token != null) {\n            const headers = _this15.prepareGetRequestData(token);\n            response = yield fetch(`${_this15.apiUrl}/product/getProductById?productId=${ProductID}`, headers);\n          } else {\n            response = yield fetch(`${_this15.apiUrl}/product/getProductById?productId=${ProductID}`);\n          }\n          if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n          }\n          return yield response.json();\n        } catch (error) {\n          _this15.notify.someThingWentWrong();\n          console.error('An error occurred:', error);\n          throw error;\n        }\n      })();\n    }\n    getProductByVariationId(variation_id) {\n      var _this16 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const response = yield fetch(`${_this16.apiUrl}/product/getProductByVariationId?variationId=${variation_id}`);\n          return yield response.json();\n        } catch (error) {\n          _this16.notify.someThingWentWrong();\n          console.error('An error occurred:', error);\n          throw error;\n        }\n      })();\n    }\n    getProductByQuantityVariationId(variation_id) {\n      var _this17 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const response = yield fetch(`${_this17.apiUrl}/product/getProductByQuantityVariationId?quantityVariationId=${variation_id}`);\n          return yield response.json();\n        } catch (error) {\n          _this17.notify.someThingWentWrong();\n          console.error('An error occurred:', error);\n          throw error;\n        }\n      })();\n    }\n    //Cart Based API\n    getCart() {\n      var _this18 = this;\n      return _asyncToGenerator(function* () {\n        let accessToken = sessionStorage.getItem(\"accessToken\");\n        let headers = _this18.prepareGetRequestData(accessToken);\n        try {\n          const response = yield fetch(`${_this18.apiUrl}/cart/getCartPage`, headers);\n          if (response.status == 200) {\n            _this18.user_signed_in = true;\n          }\n          return yield response.json();\n        } catch (error) {\n          _this18.notify.someThingWentWrong();\n          console.error('An error occurred:', error);\n          throw error;\n        }\n      })();\n    }\n    addToCart(userData) {\n      var _this19 = this;\n      return _asyncToGenerator(function* () {\n        let accessToken = sessionStorage.getItem(\"accessToken\");\n        let headers = _this19.prepareGetPostPutWithBodyAndToken(accessToken, \"POST\", userData);\n        try {\n          const response = yield fetch(`${_this19.apiUrl}/cart/addToCart`, headers);\n          return yield response.json();\n        } catch (error) {\n          _this19.notify.someThingWentWrong();\n          throw error;\n        }\n      })();\n    }\n    UpdateCartItemQuantity(userData) {\n      var _this20 = this;\n      return _asyncToGenerator(function* () {\n        let accessToken = sessionStorage.getItem(\"accessToken\");\n        let headers = _this20.prepareGetPostPutWithBodyAndToken(accessToken, \"PUT\", userData);\n        try {\n          const response = yield fetch(`${_this20.apiUrl}/cart/updateProductsOfCart`, headers);\n          if (!response.ok) {\n            _this20.notify.someThingWentWrong();\n          }\n          return yield response.json();\n        } catch (error) {\n          _this20.notify.someThingWentWrong();\n          alert(\"Something Went Wrong, Plaese Try Again\");\n          throw error;\n        }\n      })();\n    }\n    removeItemFromCart(userData) {\n      var _this21 = this;\n      return _asyncToGenerator(function* () {\n        let accessToken = sessionStorage.getItem(\"accessToken\");\n        let headers = _this21.prepareGetPostPutWithBodyAndToken(accessToken, \"PUT\", userData);\n        try {\n          const response = yield fetch(`${_this21.apiUrl}/cart/deleteProductsFromCart`, headers);\n          return yield response.json();\n        } catch (error) {\n          _this21.notify.someThingWentWrong();\n          alert(\"Something Went Wrong, Plaese Try Again\");\n          throw error;\n        }\n      })();\n    }\n    calculateShippingCost(userData) {\n      var _this22 = this;\n      return _asyncToGenerator(function* () {\n        let accessToken = sessionStorage.getItem(\"accessToken\");\n        let headers = _this22.prepareGetPostPutWithBodyAndToken(accessToken, \"POST\", userData);\n        try {\n          const response = yield fetch(`${_this22.apiUrl}/product/shippingCost`, headers);\n          if (!response.ok) {\n            const errorResponse = yield response.json();\n            _this22.notify.processWarning(errorResponse.message);\n          }\n          return yield response.json();\n        } catch (error) {\n          throw error;\n        }\n      })();\n    }\n    PlaceOrder(userData) {\n      var _this23 = this;\n      return _asyncToGenerator(function* () {\n        let resp = null;\n        let accessToken = sessionStorage.getItem(\"accessToken\");\n        let headers = _this23.prepareGetPostPutWithBodyAndToken(accessToken, \"POST\", userData);\n        try {\n          const response = yield fetch(`${_this23.apiUrl}/product/buyNow`, headers);\n          if (!response.ok) {\n            const errorResponse = yield response.json();\n            _this23.notify.processNotSuccessfull(errorResponse.message);\n          } else {\n            resp = _this23.deleteCartProducts();\n          }\n          return resp;\n        } catch (error) {\n          throw error;\n        }\n      })();\n    }\n    deleteCartProducts() {\n      var _this24 = this;\n      return _asyncToGenerator(function* () {\n        let accessToken = sessionStorage.getItem(\"accessToken\");\n        let headers = _this24.prepareGetPostPutWithBodyAndToken(accessToken, \"PUT\", {});\n        try {\n          const response = yield fetch(`${_this24.apiUrl}/cart/deleteAllProductsFromCart`, headers);\n          if (!response.ok) {\n            const errorResponse = yield response.json();\n            _this24.notify.processNotSuccessfull(errorResponse.message);\n          }\n          return yield response.json();\n        } catch (error) {\n          throw error;\n        }\n      })();\n    }\n    //Profile Based Apis\n    getAddressByUserId() {\n      var _this25 = this;\n      return _asyncToGenerator(function* () {\n        let accessToken = sessionStorage.getItem(\"accessToken\");\n        let headers = _this25.prepareGetRequestData(accessToken);\n        try {\n          const response = yield fetch(`${_this25.apiUrl}/address/getAddressByUserId`, headers);\n          if (response.status == 200) {\n            _this25.user_signed_in = true;\n          }\n          return yield response.json();\n        } catch (error) {\n          _this25.notify.someThingWentWrong();\n          console.error('An error occurred:', error);\n          throw error;\n        }\n      })();\n    }\n    getAddressById(addressId) {\n      var _this26 = this;\n      return _asyncToGenerator(function* () {\n        let accessToken = sessionStorage.getItem(\"accessToken\");\n        let headers = _this26.prepareGetRequestData(accessToken);\n        try {\n          const response = yield fetch(`${_this26.apiUrl}/address/getAddressById?addressId=${addressId}`, headers);\n          return yield response.json();\n        } catch (error) {\n          _this26.notify.someThingWentWrong();\n          console.error('An error occurred:', error);\n          throw error;\n        }\n      })();\n    }\n    addNewAddress(userData) {\n      var _this27 = this;\n      return _asyncToGenerator(function* () {\n        let accessToken = sessionStorage.getItem(\"accessToken\");\n        let headers = _this27.prepareGetPostPutWithBodyAndToken(accessToken, \"POST\", userData);\n        try {\n          const response = yield fetch(`${_this27.apiUrl}/address/addAddress`, headers);\n          return yield response.json();\n        } catch (error) {\n          _this27.notify.someThingWentWrong();\n          console.error('An error occurred:', error);\n          throw error;\n        }\n      })();\n    }\n    updateAddress(userData) {\n      var _this28 = this;\n      return _asyncToGenerator(function* () {\n        let accessToken = sessionStorage.getItem(\"accessToken\");\n        let headers = _this28.prepareGetPostPutWithBodyAndToken(accessToken, \"PUT\", userData);\n        try {\n          const response = yield fetch(`${_this28.apiUrl}/address/updateAddress`, headers);\n          return yield response.json();\n        } catch (error) {\n          _this28.notify.someThingWentWrong();\n          console.error('An error occurred:', error);\n          throw error;\n        }\n      })();\n    }\n    deleteAddressbyId(address) {\n      var _this29 = this;\n      return _asyncToGenerator(function* () {\n        let accessToken = sessionStorage.getItem(\"accessToken\");\n        try {\n          const response = yield fetch(`${_this29.apiUrl}/address/deleteAddressById?addressId=${address}`, {\n            method: \"DELETE\",\n            headers: {\n              'Authorization': `Bearer ${accessToken}`,\n              'Content-Type': 'application/json'\n            }\n          });\n          return yield response.json();\n        } catch (error) {\n          _this29.notify.someThingWentWrong();\n          console.error('An error occurred:', error);\n          throw error;\n        }\n      })();\n    }\n    savedOrders() {\n      var _this30 = this;\n      return _asyncToGenerator(function* () {\n        let accessToken = sessionStorage.getItem(\"accessToken\");\n        let headers = _this30.prepareGetRequestData(accessToken);\n        try {\n          const response = yield fetch(`${_this30.apiUrl}/product/yourOrder`, headers);\n          if (response.status == 200) {\n            _this30.user_signed_in = true;\n          }\n          return yield response.json();\n        } catch (error) {\n          _this30.notify.someThingWentWrong();\n          console.error('An error occurred:', error);\n          throw error;\n        }\n      })();\n    }\n    static #_ = this.ɵfac = function ApiService_Factory(t) {\n      return new (t || ApiService)(i0.ɵɵinject(i1.NotificationService), i0.ɵɵinject(i2.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiService,\n      factory: ApiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}